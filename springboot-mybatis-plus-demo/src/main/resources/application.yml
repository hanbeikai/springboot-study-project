server:
  port: 8080
spring:
  application:
    name: mybatis-plus-demo
  profiles:
    active: more
  http:
    encoding:
      force: true

ignore:
  urls:
    anon:
    - /swagger-resources/**
    - /swagger-ui.html
    - /v2/weixinapi-docs
    - /swagger/weixinapi-docs
    - /webjars/**
    - /actuator/**
    - /**/*.css
    - /verify/**

logging:
  path: /softwore/Idea/WorkSpace/springboot-study-project/springboot-mybatis-plus-demo/logs

multipart:
  maxFileSize: 10485760
  maxRequestSize: 52428800


#MP所支持的application.yml设置 具体参考官方文档https://jobob.gitee.io/mp3doc/中设置部分
mybatis-plus:
  check-config-location: false
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:mapper/*/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.beikai.springbootmybatisplusdemo.**.model
  #  config-location: classpath:mybatis/mybatis-config.xml #如果需要使用原生mybatis设置文件，则这里需要指明具体路径
  #  mapper-locations: classpath:/mybatis/mapper/*DAO.xml #在resource目录下的写法
  #  mapper-locations: classpath:/com/mpspringboot/mapper/xml/*Mapper.xml #在src/main/java下的写法(同时配置POM文件中source属性)
  #  mapper-locations: classpath*:/mybatis/mapper/*DAO.xml #Maven多项目模块下使用classpath*写法
  #  type-aliases-package: com.XX.entity #设置类名别名扫描位置，设置后可使用类名替代全限定类名，多个package用逗号或者分号分隔
  #  type-aliases-super-type: java.lang.Object #请和typeAliasesPackage一起使用，设置后仅会扫描路径下以该类作为父类的域对象 。
  #type-handlers-package: org.apache.ibatis.type #设置类型转换类所在的包位置
  type-enums-package: com.beikai.springbootmybatisplusdemo.common.enums #枚举字段扫描，支持实体的枚举字段
  #  check-config-location: false #启动时是否检查 MyBatis XML 文件的存在，默认不检查。
  executor-type: REUSE #通过该属性可指定 MyBatis 的执行器，默认值为SIMPLE，MyBatis 的执行器总共有三种：
  #                         ExecutorType.SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）
  #                         ExecutorType.REUSE：该执行器类型会复用预处理语句（PreparedStatement）
  #                         ExecutorType.BATCH：该执行器类型会批量执行所有的更新语句
  #  configuration-properties: classpath:mybatis/config.properties #指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署。
  #MyBatis-Plus 全局策略配置
  global-config:
    refresh: true #启动后，修改Target中的XML即可更新对应Mapper的逻辑，用于调试；生产中不要启动
    sql-parser-cache: true #是否缓存 Sql 解析，默认不缓存。
    #    sql-session: com.xxx.SqlSession #单例重用 SqlSession
    #    sql-session-factory: com.xxx.SqlSessionFactory #
    #全局配置中关于DB的设置
    db-config:
      db-type: MYSQL #数据库类型
      capital-mode: true #是否开启大写命名，开启后生成SQL语句都为大写；默认不开启。
      #      table-prefix: sys #生成的SQL会在表名上增加此前缀
      table-underline: true #生成的SQL语句中，表名是否自动加入驼峰转下划线（如SystemUser=>system_user）
      field-strategy: NOT_NULL #字段更新插入策略  0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      #                               IGNORED：所有字段都更新和插入
      #                               NOT_NULL：只更新和插入非NULL值
      #                               NOT_EMPTY：只更新和插入非NULL值且非空字符串
      #                               DEFAULT：默认NOT_NULL
      id-type: ID_WORKER #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      #                               AUTO(0)：MP自动决定
      #                               NONE(1)：生成语句插入null，需要数据库自增时可以使用
      #                               INPUT(2)：根据用户输入值
      #                               ID_WORKER(3)：全局唯一ID (数字类型唯一ID)
      #                               UUID(4)：全局唯一ID UUID
      #                               ID_WORKER_STR(5)：全局唯一ID (字符型类型唯一ID)
      column-like: true #使用实体构建查询条件时，如new QueryWrapper<SystemUser>(systemUser)，生成的SQL语句是使用LIKE还是=
      logic-delete-value: 1 #逻辑删除字段表示删除的值
      logic-not-delete-value: 0 #逻辑删除字段表示未删除的值
        #一部分对原生MyBatis所支持的配置，我建议使用config-location加mybatis-config.xml实现比较清晰，不要在这里使用
  configuration:
    mapUnderscoreToCamelCase: true #默认true，是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。
    aggressive-lazy-loading: true #当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用。
        #    auto-mapping-unknown-column-behavior: none #MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性，总共有 3 种可选值：
        #                                               AutoMappingBehavior.NONE：不启用自动映射
        #                                               AutoMappingBehavior.PARTIAL：只对非嵌套的 resultMap 进行自动映射
        #                                               AutoMappingBehavior.FULL：对所有的 resultMap 都进行自动映射
        #    auto-mapping-behavior: partial #MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理，总共有 3 种可选值：
        #                                  AutoMappingUnknownColumnBehavior.NONE：不做任何处理 (默认值)
        #                                  AutoMappingUnknownColumnBehavior.WARNING：以日志的形式打印相关警告信息
        #                                  AutoMappingUnknownColumnBehavior.FAILING：当作映射失败处理，并抛出异常和详细信息
    cache-enabled: true #全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。
        #    call-setters-on-nulls: false #指定当结果集中值为 null 的时候是否调用映射对象的 Setter（Map 对象时为 put）方法，通常运用于有 Map.keySet() 依赖或 null 值初始化的情况。
        #                                  通俗的讲，即 MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常。
        #                                  当您遇到类似的情况，请针对该属性进行相关配置以解决以上问题。
        #                                  WARNING
        #                                  基本类型（int、boolean 等）是不能设置成 null 的。
        #    configuration-factory: com.xxx.SampleConfigurationFactory #指定一个提供 Configuration 实例的工厂类。
      #该工厂生产的实例将用来加载已经被反序列化对象的懒加载属性值，其必须包含一个签名方法static Configuration getConfiguration()。（从 3.2.3 版本开始）
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 配置在控制台输出 sql语句以及参数
